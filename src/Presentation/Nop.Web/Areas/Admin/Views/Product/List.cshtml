@model ProductSearchModel

@using Nop.Core.Domain.Catalog;

<!-- jQuery 라이브러리 추가 -->
@*<script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>*@

<link rel="stylesheet" href="~/lib/fontawesome/css/all.css" asp-append-version="true" />
<link rel="stylesheet" href="~/css/site.min.css" asp-append-version="true" />
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css" />

<!-- DataTables CSS -->
<link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/1.10.21/css/jquery.dataTables.css" />

<!-- DataTables JS -->
<script type="text/javascript" charset="utf8" src="https://cdn.datatables.net/1.10.21/js/jquery.dataTables.js"></script>

<!-- sweetalert2 CSS from CDN -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css" />

<!-- sweetalert2 JS from CDN -->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<!-- sweetalert CSS from CDN -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/sweetalert/1.1.3/sweetalert.min.css" />

<!-- sweetalert JS from CDN -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/sweetalert/1.1.3/sweetalert.min.js"></script>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-pzjw8f+ua7Kw1TIq0v8FqFjcJ6pajs/rfdfs3SO+kD5tr5Szkbe5Ck4Ck4C2DgHf" crossorigin="anonymous"></script>


@{
    //page title
    ViewBag.PageTitle = T("Admin.Catalog.Products").Text;
    //active menu item (system name)
    NopHtml.SetActiveMenuItemSystemName("Products");
    int defaultPageLength = Context.Request.Cookies.TryGetValue("dataTablePageLength", out var pageLengthCookie) ? int.Parse(pageLengthCookie) : 10;
    int storedPageNumber = Context.Request.Cookies.TryGetValue("dataTablePageNumber", out var pageNumberCookie) ? int.Parse(pageNumberCookie) : 0;

}

@{
    const string hideSearchBlockAttributeName = "ProductListPage.HideSearchBlock";
    var hideSearchBlock = await genericAttributeService.GetAttributeAsync<bool>(await workContext.GetCurrentCustomerAsync(), hideSearchBlockAttributeName);
}

@if (Model.LicenseCheckModel.BlockPages != true)
{
    <form asp-controller="Product" asp-action="List" method="post">
        <div class="content-header clearfix">
            <h1 class="float-left">
                @T("Admin.Catalog.Products")
            </h1>

            <div class="float-right" style="display: flex; justify-content: space-between;">

                @if (User.Identity.Name == "admin@shipgo.biz")
                {
                    <a asp-action="ApiCreate" class="btn btn-primary">
                        <i class="fas fa-plus-square"></i>
                        API
                    </a>
                }

                <div class="float-right">
                    <a asp-action="Create" class="btn btn-primary">
                        <i class="fas fa-plus-square"></i>
                        @T("Admin.Common.AddNew")
                    </a>
                    <button asp-action="DownloadCatalogPDF" type="submit" name="download-catalog-pdf" class="btn bg-purple">
                        <i class="far fa-file-pdf"></i>
                        @T("Admin.Catalog.Products.List.DownloadPDF")
                    </button>
                    <div class="btn-group">
                        <button type="button" class="btn btn-success">
                            <i class="fas fa-download"></i>
                            @T("Admin.Common.Export")
                        </button>
                        <button type="button" class="btn btn-success dropdown-toggle" data-toggle="dropdown" aria-expanded="false">
                            <span class="caret"></span>
                            <span class="sr-only">&nbsp;</span>
                        </button>
                        <ul class="dropdown-menu" role="menu">
                            <li class="dropdown-item">
                                <button asp-action="ExportToXml" type="submit" name="exportxml-all">
                                    <i class="far fa-file-code"></i>
                                    @T("Admin.Common.ExportToXml.All")
                                </button>
                            </li>
                            <li class="dropdown-item">
                                <button type="button" id="exportxml-selected">
                                    <i class="far fa-file-code"></i>
                                    @T("Admin.Common.ExportToXml.Selected")
                                </button>
                            </li>
                            <li class="dropdown-divider"></li>
                            <li class="dropdown-item">
                                <button asp-action="ExportToExcel" type="submit" name="exportexcel-all">
                                    <i class="far fa-file-excel"></i>
                                    @T("Admin.Common.ExportToExcel.All")
                                </button>
                            </li>
                            <li class="dropdown-item">
                                <button type="button" id="exportexcel-selected">
                                    <i class="far fa-file-excel"></i>
                                    @T("Admin.Common.ExportToExcel.Selected")
                                </button>
                            </li>
                        </ul> <!-- closing ul -->
                    </div> <!-- closing div for btn-group -->
                    @if (!Model.IsLoggedInAsVendor || Model.AllowVendorsToImportProducts)
                    {
                        //a vendor cannot import products
                        <button type="button" name="importexcel" class="btn bg-olive" data-toggle="modal" data-target="#importexcel-window">
                            <i class="fas fa-upload"></i>
                            @T("Admin.Common.Import")
                        </button>
                    }
                    <button type="button" id="delete-selected" class="btn btn-danger">
                        <i class="far fa-trash-alt"></i>
                        @T("Admin.Common.Delete.Selected")
                    </button>
                    <nop-action-confirmation asp-button-id="delete-selected" />
                    @await Component.InvokeAsync(typeof(AdminWidgetViewComponent), new { widgetZone = AdminWidgetZones.ProductListButtons, additionalData = Model })
                </div> <!-- closing div for right floating div -->
            </div> <!-- closing div for outermost right floating div -->
        </div> <!-- closing div for content-header -->

        <section class="content">
            <div class="container-fluid">
                <div class="form-horizontal">
                    <div class="cards-group">
                        <div class="card card-default card-search">
                            <div class="card-body">
                                <div class="row search-row @(!hideSearchBlock ? "opened" : "")" data-hideAttribute="@hideSearchBlockAttributeName">
                                    <div class="search-text">@T("Admin.Common.Search")</div>
                                    <div class="icon-search"><i class="fas fa-search" aria-hidden="true"></i></div>
                                    <div class="icon-collapse"><i class="far fa-angle-@(!hideSearchBlock ? "up" : "down")" aria-hidden="true"></i></div>
                                </div>

                                <div class="search-body @(hideSearchBlock ? "closed" : "")">
                                    <div class="row">
                                        <div class="col-md-5">
                                            <div class="form-group row">
                                                <div class="col-md-4">
                                                    <nop-label asp-for="SearchProductName" />
                                                </div>
                                                <div class="col-md-8">
                                                    <nop-editor asp-for="SearchProductName" />
                                                </div>
                                            </div>
                                            <div class="form-group row" @(Model.AvailableCategories.SelectionIsNotPossible() ? Html.Raw("style=\"display:none\"") : null)>
                                                <div class="col-md-4">
                                                    <nop-label asp-for="SearchCategoryId" />
                                                </div>
                                                <div class="col-md-8">
                                                    <nop-select asp-for="SearchCategoryId" asp-items="Model.AvailableCategories" />
                                                </div>
                                            </div>
                                            <div class="form-group row" @(Model.AvailableCategories.SelectionIsNotPossible() ? Html.Raw("style=\"display:none\"") : null)>
                                                <div class="col-md-4">
                                                    <nop-label asp-for="SearchIncludeSubCategories" />
                                                </div>
                                                <div class="col-md-8">
                                                    <nop-editor asp-for="SearchIncludeSubCategories" />
                                                </div>
                                            </div>
                                            <div class="form-group row" @(Model.AvailableManufacturers.SelectionIsNotPossible() ? Html.Raw("style=\"display:none\"") : null)>
                                                <div class="col-md-4">
                                                    <nop-label asp-for="SearchManufacturerId" />
                                                </div>
                                                <div class="col-md-8">
                                                    <nop-select asp-for="SearchManufacturerId" asp-items="Model.AvailableManufacturers" />
                                                </div>
                                            </div>
                                            <div class="form-group row" @(Model.AvailableVendors.SelectionIsNotPossible() || Model.IsLoggedInAsVendor ? Html.Raw("style='display: none;'") : null)>
                                                <div class="col-md-4">
                                                    <nop-label asp-for="SearchVendorId" />
                                                </div>
                                                <div class="col-md-8">
                                                    <nop-select asp-for="SearchVendorId" asp-items="Model.AvailableVendors" />
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-md-7">
                                            <div class="form-group row" @(Model.HideStoresList ? Html.Raw("style=\"display:none\"") : null)>
                                                <div class="col-md-4">
                                                    <nop-label asp-for="SearchStoreId" />
                                                </div>
                                                <div class="col-md-8">
                                                    <nop-select asp-for="SearchStoreId" asp-items="Model.AvailableStores" />
                                                </div>
                                            </div>
                                            <div class="form-group row" @(Model.AvailableWarehouses.SelectionIsNotPossible() ? Html.Raw("style=\"display:none\"") : null)>
                                                <div class="col-md-4">
                                                    <nop-label asp-for="SearchWarehouseId" />
                                                </div>
                                                <div class="col-md-8">
                                                    <nop-select asp-for="SearchWarehouseId" asp-items="Model.AvailableWarehouses" />
                                                </div>
                                            </div>
                                            <div class="form-group row">
                                                <div class="col-md-4">
                                                    <nop-label asp-for="SearchProductTypeId" />
                                                </div>
                                                <div class="col-md-8">
                                                    <nop-select asp-for="SearchProductTypeId" asp-items="Model.AvailableProductTypes" />
                                                </div>
                                            </div>
                                            <div class="form-group row">
                                                <div class="col-md-4">
                                                    <nop-label asp-for="SearchPublishedId" />
                                                </div>
                                                <div class="col-md-8">
                                                    <nop-select asp-for="SearchPublishedId" asp-items="Model.AvailablePublishedOptions" />
                                                </div>
                                            </div>
                                            <div class="form-group row">
                                                <div class="col-md-4">
                                                    <nop-label asp-for="GoDirectlyToSku" />
                                                </div>
                                                <div class="col-md-8">
                                                    <div class="input-group input-group-short">
                                                        <nop-editor asp-for="GoDirectlyToSku" />
                                                        <span class="input-group-append">
                                                            <button type="submit" id="go-to-product-by-sku" name="go-to-product-by-sku" class="btn btn-info btn-flat">
                                                                @T("Admin.Common.Go")
                                                            </button>
                                                        </span>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="text-center col-12">
                                            <button type="button" id="search-products" class="btn btn-primary btn-search">
                                                <i class="fas fa-search"></i>
                                                @T("Admin.Common.Search")
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <style>
                            .sku-text {
                                max-width: 50px; /* 최대 너비 설정 */
                                overflow: hidden; /* 넘치는 부분은 숨김 */
                                text-overflow: ellipsis; /* 넘치는 텍스트를 ...으로 표시 */
                                white-space: nowrap; /* 텍스트를 한 줄로 표시 */
                                display: block; /* block 레벨 요소로 설정 (필요한 경우) */
                            }

                            .product-name-text {
                                display: inline-block;
                                width: 100%;
                            }

                            .product-name-input {
                                width: 100%;
                            }

                            .btn-copy-sku {
                                background: none;
                                border: none;
                                cursor: pointer;
                                padding: 5px;
                            }

                            .product-name-input {
                                width: 100%;
                            }

                            .dropdown-submenu {
                                position: relative;
                            }

                                .dropdown-submenu > .dropdown-menu {
                                    top: 0;
                                    left: 100%;
                                    margin-top: -1px;
                                }

                            .dropdown-item.dropdown-toggle {
                                white-space: nowrap;
                                overflow: hidden;
                                text-overflow: ellipsis;
                                max-width: 250px;
                                display: flex;
                                align-items: center;
                                justify-content: space-between;
                            }

                            /* 로딩 스피너 CSS 추가 시작 */
                            #loadingSpinner {
                                position: fixed;
                                top: 0;
                                left: 0;
                                width: 100%;
                                height: 100%;
                                background-color: rgba(255, 255, 255, 0.8);
                                z-index: 9999;
                            }

                            .spinner {
                                border: 16px solid #f3f3f3; /* Light grey */
                                border-top: 16px solid #3498db; /* Blue */
                                border-radius: 50%;
                                width: 50px;
                                height: 50px;
                                animation: spin 2s linear infinite;
                                position: absolute;
                                top: 50%;
                                left: 50%;
                                transform: translate(-50%, -50%);
                            }

                            @@keyframes spin {
                                0% {
                                    transform: translate(-50%, -50%) rotate(0deg);
                                }

                                100% {
                                    transform: translate(-50%, -50%) rotate(360deg);
                                }
                            }
                            /* 로딩 스피너 CSS 추가 끝 */
                        </style>

                        <div class="card card-default">
                            <div class="card-body">
                                <button class="btn btn-secondary dropdown-toggle" type="button" id="categoryDropdown" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                    @T("admin.catalog.products.fields.selectcategory")
                                </button>
                                <ul class="dropdown-menu" id="customDropdownMenu" aria-labelledby="categoryDropdown"></ul>
                                <!-- 선택한 카테고리 적용 버튼 -->
                                <button class="btn btn-primary ml-2" id="applyCategory">@T("admin.catalog.products.fields.applyselectedcategories")</button>

                            </div>
                        </div>

                        <script>
                            $(document).ready(function () {
                                var $dropdownMenu = $("#customDropdownMenu");

                                $.ajax({
                                    url: '@(Url.Action("GetCategories", "Product"))',
                                    type: 'GET',
                                    dataType: 'json',
                                    success: function (data) {
                                        let html = renderCategoryDropdown(data);
                                        $dropdownMenu.html(html);
                                    },
                                    error: function (error) {
                                        console.error("카테고리 데이터를 가져오는데 실패했습니다.", error);
                                        Swal.fire("오류 발생!", "카테고리 데이터를 가져오는데 실패했습니다.", "error");
                                    }
                                });

                                $dropdownMenu.on("click", ".final-category", function (event) {
                                    event.preventDefault();
                                    var selectedCategoryText = $(this).text().trim();
                                    var selectedCategoryId = $(this).data('id');  // 카테고리 ID 가져오기
                                    $('#categoryDropdown').text(selectedCategoryText).data('selected-id', selectedCategoryId);  // 버튼에 ID와 텍스트 저장
                                    document.cookie = "SelectedCategoryId=" + selectedCategoryId + ";path=/"; // ID를 쿠키에 저장
                                    document.cookie = "SelectedCategoryText=" + selectedCategoryText + ";path=/"; // 텍스트를 쿠키에 저장
                                });

                                // 페이지 로드 시 쿠키에서 값을 읽어와 해당 카테고리의 텍스트를 설정
                                var storedSelectedCategoryId = getCookie("SelectedCategoryId");
                                var storedSelectedCategoryText = getCookie("SelectedCategoryText");
                                if (storedSelectedCategoryId && storedSelectedCategoryText) {
                                    $('#categoryDropdown').text(storedSelectedCategoryText).data('selected-id', storedSelectedCategoryId);
                                }

                                $('body').on('mouseenter mouseleave', '.dropdown', function (e) {
                                    let dropdown = $(this).find('#customDropdownMenu');
                                    setTimeout(function () {
                                        dropdown.toggleClass('show', e.type === 'mouseenter');
                                    }, e.type === 'mouseleave' ? 300 : 0);
                                });

                                $('body').on('mouseenter', '.dropdown-submenu', function (e) {
                                    $(this).find('> .dropdown-menu').addClass('show');
                                });

                                $('body').on('mouseleave', '.dropdown-submenu', function (e) {
                                    $(this).find('> .dropdown-menu').removeClass('show');
                                });

                                $('body').on('mouseenter', '.dropdown-submenu', function (e) {
                                    $(this).siblings('.dropdown-submenu').find('.dropdown-menu').removeClass('show');
                                });

                                $('body').on('click', '.dropdown-submenu a.dropdown-toggle', function (e) {
                                    e.stopPropagation();
                                });

                                $('#applyCategory').click(function (event) {
                                    event.preventDefault();

                                    var selectedCategory = $('#categoryDropdown').text().trim();
                                    var selectedCategoryId = $('#categoryDropdown').data('selected-id');

                                    if (!selectedCategoryId || selectedCategory === "선택한 카테고리") {
                                        Swal.fire("알림", "카테고리를 먼저 선택해주세요.", "warning");
                                        return;
                                    }

                                    var selectedProductIds = selectedIds; // 선택된 상품 ID 목록 가져오기

                                    if (selectedProductIds.length === 0) {
                                        Swal.fire("알림", "상품을 선택해주세요.", "warning");
                                        return;
                                    }

                                    // 선택한 상품과 카테고리 정보 출력
                                    Swal.fire({
                                        title: "카테고리 변경 확인",
                                        text: "선택한 상품 개수: " + selectedProductIds.length + "개\n변경할 카테고리 이름: " + selectedCategory + "\n\n카테고리를 변경하시겠습니까?",
                                        icon: "info",
                                        showCancelButton: true,
                                        confirmButtonText: "확인",
                                        cancelButtonText: "취소",
                                    }).then((result) => {
                                        if (result.isConfirmed) {
                                            showLoadingSpinner();  // 로딩 스피너 표시
                                            var postData = {
                                                'productIds[]': selectedProductIds,
                                                'categoryIds[]': [selectedCategoryId]
                                            };
                                            addAntiForgeryToken(postData); // CSRF token 추가
                                            $.ajax({
                                                cache: false,
                                                type: "POST",
                                                url: "@(Url.Action("UpdateProductCategories", "Product"))",
                                                data: postData,
                                                success: function (response) {
                                                    hideLoadingSpinner();  // 로딩 스피너 숨기기
                                                    if (response.Success) {
                                                        Swal.fire("알림", "상품의 카테고리가 성공적으로 업데이트되었습니다.", "success");
                                                        updateTable('#products-grid');
                                                    } else {
                                                        Swal.fire("알림", "카테고리 업데이트 중 오류가 발생했습니다.", "error");
                                                    }
                                                },
                                                error: function () {
                                                    hideLoadingSpinner();  // 로딩 스피너 숨기기
                                                    Swal.fire("알림", "카테고리 업데이트 중 오류가 발생했습니다.", "error");
                                                }
                                            });
                                        }
                                    });
                                });

                                function renderCategoryDropdown(categories) {
                                    let html = '';
                                    for (let cat of categories) {
                                        const hasDropdown = cat.children && cat.children.length > 0;
                                        html += `<li class="${hasDropdown ? 'dropdown-submenu' : ''}"><a class="dropdown-item ${hasDropdown ? 'dropdown-toggle' : 'final-category'}" data-id="${cat.id}">${cat.text}</a>`;
                                        if (hasDropdown) {
                                            html += '<ul class="dropdown-menu">';
                                            html += renderSubCategoryDropdown(cat.children);
                                            html += '</ul>';
                                        }
                                        html += '</li>';
                                    }
                                    return html;
                                }

                                function renderSubCategoryDropdown(subCategories) {
                                    let html = '';
                                    for (let sub of subCategories) {
                                        const hasDropdown = sub.children && sub.children.length > 0;
                                        html += `<li class="${hasDropdown ? 'dropdown-submenu' : ''}"><a class="dropdown-item ${hasDropdown ? 'dropdown-toggle' : 'final-category'}" data-id="${sub.id}">${sub.text}</a>`;
                                        if (hasDropdown) {
                                            html += '<ul class="dropdown-menu">';
                                            html += renderSubCategoryDropdown(sub.children);
                                            html += '</ul>';
                                        }
                                        html += '</li>';
                                    }
                                    return html;
                                }

                                function showLoadingSpinner() {
                                    $("body").append('<div id="loadingSpinner"><div class="spinner"></div></div>');
                                }

                                function hideLoadingSpinner() {
                                    $("#loadingSpinner").remove();
                                }
                            });
                        </script>

                        <div class="card card-default">
                            <div class="card-body">
                                <nop-alert asp-alert-id="updateNameFailed" />
                                <nop-doc-reference asp-string-resource="@T("Admin.Documentation.Reference.Products", Docs.Products + Utm.OnAdmin)" />

                                @await Html.PartialAsync("Table", new DataTablesModel
                                {
                                Name = "products-grid",
                                UrlRead = new DataUrl("ProductList", "Product", null),
                                SearchButtonId = "search-products",
                                LengthMenu = Model.AvailablePageSizes,
                                Filters = new List<FilterParameter>
                                {
                                new FilterParameter(nameof(Model.SearchProductName)),
                                new FilterParameter(nameof(Model.SearchCategoryId)),
                                new FilterParameter(nameof(Model.SearchIncludeSubCategories), typeof(bool)),
                                new FilterParameter(nameof(Model.SearchManufacturerId)),
                                new FilterParameter(nameof(Model.SearchStoreId)),
                                new FilterParameter(nameof(Model.SearchWarehouseId)),
                                new FilterParameter(nameof(Model.SearchVendorId)),
                                new FilterParameter(nameof(Model.SearchProductTypeId)),
                                new FilterParameter(nameof(Model.SearchPublishedId))
                                },
                                ColumnCollection = new List<ColumnProperty>
                                {
                                new ColumnProperty(nameof(ProductModel.Id))
                                {
                                IsMasterCheckBox = true,
                                Render = new RenderCheckBox("checkbox_products"),
                                ClassName =  NopColumnClassDefaults.CenterAll,
                                Width = "50"
                                },
                                new ColumnProperty(nameof(ProductModel.PictureThumbnailUrl))
                                {
                                Title = T("Admin.Catalog.Products.Fields.PictureThumbnailUrl").Text,
                                Width = "150",
                                Render = new RenderPicture(width: 200)
                                },
                                new ColumnProperty(nameof(ProductModel.Name))
                                {
                                Title = T("Admin.Catalog.Products.Fields.Name").Text,
                                Render = new RenderCustom("renderProductNameWithEditButton")
                                },
                                new ColumnProperty(nameof(ProductModel.Sku))
                                {
                                Title = T("Admin.Catalog.Products.Fields.Sku").Text,
                                Width = "50",
                                Render = new RenderCustom("renderSkuWithCopyButton")
                                },
                                new ColumnProperty(nameof(ProductModel.Price))
                                {
                                Title = T("Admin.Catalog.Products.Fields.Price").Text,
                                Render = new RenderCustom("renderColumnPrice"),
                                Width = "50"
                                },
                                new ColumnProperty(nameof(ProductModel.StockQuantityStr))
                                {
                                Title = T("Admin.Catalog.Products.Fields.StockQuantity").Text,
                                Width = "75"
                                },
                                new ColumnProperty(nameof(ProductModel.Published))
                                {
                                Title = T("Admin.Catalog.Products.Fields.Published").Text,
                                Width = "40",
                                ClassName = NopColumnClassDefaults.CenterAll,
                                Render = new RenderBoolean()
                                },
                                new ColumnProperty(nameof(ProductModel.Id))
                                {
                                Title = T("Admin.Common.Edit").Text,
                                Width = "60",
                                ClassName =  NopColumnClassDefaults.Button,
                                Render = new RenderButtonEdit(new DataUrl("Edit"))
                                }
                                }
                                })

                                <script>
                                    // SKU 클립보드 복사 터튼 랜더링
                                    function renderSkuWithCopyButton(data, type, row, meta) {
                                        return '<span class="sku-text">' + data + '</span> <button class="btn-copy-sku custom-placement" data-sku="' + data + '" title="' + data + '"><i class="fas fa-copy"></i></button>';
                                    }

                                    function renderColumnPrice(data, type, row, meta) {
                                        return (row.ProductTypeId != @((int)ProductType.GroupedProduct) ) ? data : null;
                                    }

                                    var editProductNameText = '@T("Admin.Catalog.Products.Fields.productnameedit").Text';

                                    function renderProductNameWithEditButton(data, type, row, meta) {
                                        return '<span class="product-name-text">' + data + '</span> <button class="btn-edit-product-name" data-product-id="' + row.Id + '">' + editProductNameText + '</button>';
                                    }

                                    $(document).ready(function () {
                                        $('body').on('click', '.btn-edit-product-name', function () {
                                            var $btn = $(this);
                                            var originalName = $btn.siblings('.product-name-text').text();
                                            var input = $('<input type="text" class="product-name-input" value="' + originalName + '"/>');
                                            var updateButton = $('<button class="btn-update-product-name" data-product-id="' + $btn.data('product-id') + '">최신화</button>');
                                            var cancelButton = $('<button class="btn-cancel-product-name">취소</button>');

                                            $btn.siblings('.product-name-text').replaceWith(input);
                                            $btn.after(updateButton).after(cancelButton).remove();

                                            updateButton.on('click', function () {
                                                event.preventDefault();
                                                event.stopPropagation();
                                                var newName = input.val().trim();
                                                if (!newName) {
                                                    Swal.fire('오류', '상품 이름은 빈 값일 수 없습니다.', 'error');
                                                    input.focus();
                                                    return;
                                                }

                                                var postData = {
                                                    productId: updateButton.data('product-id'), // 최신화 버튼의 data-product-id 사용
                                                    newName: newName
                                                };
                                                addAntiForgeryToken(postData);
                                                $.ajax({
                                                    cache: false,
                                                    type: "POST",
                                                    url: '@(Url.Action("UpdateProductName", "Product"))',
                                                    data: postData,
                                                    success: function () {
                                                        input.replaceWith('<span class="product-name-text">' + newName + '</span>');
                                                        cancelButton.remove();
                                                        updateButton.replaceWith('<button class="btn-edit-product-name" data-product-id="' + updateButton.data('product-id') + '">수정</button>');
                                                    },
                                                    error: function (jqXHR, textStatus, errorThrown) {
                                                        showAlert('updateNameFailed', errorThrown);
                                                    }
                                                });
                                            });

                                            cancelButton.on('click', function () {
                                                input.replaceWith('<span class="product-name-text">' + originalName + '</span>');
                                                cancelButton.remove();
                                                updateButton.replaceWith('<button class="btn-edit-product-name" data-product-id="' + updateButton.data('product-id') + '">수정</button>');
                                            });
                                        });

                                        $('#delete-selected-action-confirmation-submit-button').bind('click', function () {
                                            var postData = {
                                                selectedIds: selectedIds
                                            };
                                            addAntiForgeryToken(postData);
                                            $.ajax({
                                                cache: false,
                                                type: "POST",
                                                url: "@(Url.Action("DeleteSelected", "Product"))",
                                                data: postData,
                                                error: function (jqXHR, textStatus, errorThrown) {
                                                    showAlert('deleteSelectedFailed', errorThrown);
                                                },
                                                complete: function (jqXHR, textStatus) {
                                                    if (jqXHR.status === 204) {
                                                        showAlert('nothingSelectedAlert', '@T("Admin.Common.Alert.NothingSelected")');
                                                        return;
                                                    }
                                                    updateTable('#products-grid');
                                                }
                                            });
                                            $('#delete-selected-action-confirmation').modal('toggle');
                                            // 모달창 안닫혀서 비활성화함
                                            //return false;
                                        });

                                        $('body').on('click', '.btn-copy-sku', function (event) {
                                            event.preventDefault();

                                            var $btn = $(this);
                                            var sku = $btn.data('sku');

                                            var $temp = $("<input>");
                                            $("body").append($temp);
                                            $temp.val(sku).select();
                                            document.execCommand("copy");
                                            $temp.remove();

                                            // 현재의 툴팁을 제거
                                            $btn.tooltip('dispose');

                                            // 클릭한 툴팁 메시지 변경 및 즉시 표시
                                            $btn.attr('title', 'SKU가 복사되었습니다.')
                                                .tooltip({
                                                    trigger: 'hover',
                                                    delay: { show: 100, hide: 100 },
                                                    placement: 'right',
                                                    popperConfig: {
                                                        modifiers: [
                                                            {
                                                                name: 'offset',
                                                                options: {
                                                                    offset: [30, 0]  // 이 값을 조정하여 위치를 세부 조정할 수 있습니다. (x축, y축)
                                                                }
                                                            }
                                                        ]
                                                    }
                                                })
                                                .tooltip('show');
                                            // 일정 시간 후 원래의 메시지로 복원하고 툴팁을 숨김
                                            setTimeout(function () {
                                                $btn.tooltip('dispose');  // 현재의 툴팁을 제거
                                                $btn.attr('title', sku)
                                                    .tooltip({
                                                        trigger: 'hover',
                                                        delay: { show: 100, hide: 100 },
                                                        placement: 'right',
                                                        popperConfig: {
                                                            modifiers: [
                                                                {
                                                                    name: 'offset',
                                                                    options: {
                                                                        offset: [30, 0]
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    })
                                                    .tooltip('hide');
                                            }, 1000);
                                        });

                                        // 모든 툴팁 요소를 부트스트랩 툴팁으로 초기화
                                        var tooltipTriggerList = [].slice.call(document.querySelectorAll('.btn-copy-sku'));
                                        var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
                                            return new bootstrap.Tooltip(tooltipTriggerEl, { trigger: 'hover', delay: { show: 100, hide: 100 }, placement: 'bottom-end' });
                                        });
                                    });
                                </script>
                                <nop-alert asp-alert-id="deleteSelectedFailed" />
                                <nop-alert asp-alert-id="nothingSelectedAlert" />
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </section>
        <script>
            $(document).ready(function () {
                $("#@Html.IdFor(model => model.GoDirectlyToSku)").keydown(function (event) {
                    if (event.keyCode === 13) {
                        $("#go-to-product-by-sku").click();
                        return false;
                    }
                });

                $('select[name="products-grid_length"]').val('20').change();
            });
        </script>
        <script>
            $(document).ready(function () {
                // 1. 각 검색 필드의 변경 사항을 감지하여 쿠키에 값을 저장

                // 제품 이름 저장
                $("#SearchProductName").on("change", function () {
                    var searchProductName = $(this).val();
                    document.cookie = "SearchProductName=" + searchProductName + ";path=/";
                });

                // 카테고리 ID 저장
                $("#SearchCategoryId").on("change", function () {
                    var searchCategoryId = $(this).val();
                    document.cookie = "SearchCategoryId=" + searchCategoryId + ";path=/";
                });

                $("#SearchIncludeSubCategories").on("change", function () {
                    var searchIncludeSubCategories = $(this).prop('checked') ? 'on' : 'off';
                    document.cookie = "SearchIncludeSubCategories=" + searchIncludeSubCategories + ";path=/";
                });

                // 제조업체 ID 저장
                $("#SearchManufacturerId").on("change", function () {
                    var searchManufacturerId = $(this).val();
                    document.cookie = "SearchManufacturerId=" + searchManufacturerId + ";path=/";
                });

                // 공급업체 ID 저장
                $("#SearchVendorId").on("change", function () {
                    var searchVendorId = $(this).val();
                    document.cookie = "SearchVendorId=" + searchVendorId + ";path=/";
                });

                // 상점 ID 저장
                $("#SearchStoreId").on("change", function () {
                    var searchStoreId = $(this).val();
                    document.cookie = "SearchStoreId=" + searchStoreId + ";path=/";
                });

                // 창고 ID 저장
                $("#SearchWarehouseId").on("change", function () {
                    var searchWarehouseId = $(this).val();
                    document.cookie = "SearchWarehouseId=" + searchWarehouseId + ";path=/";
                });

                // 제품 유형 ID 저장
                $("#SearchProductTypeId").on("change", function () {
                    var searchProductTypeId = $(this).val();
                    document.cookie = "SearchProductTypeId=" + searchProductTypeId + ";path=/";
                });

                // 게시 상태 저장
                $("#SearchPublishedId").on("change", function () {
                    var searchPublishedId = $(this).val();
                    document.cookie = "SearchPublishedId=" + searchPublishedId + ";path=/";
                });

                // SKU로 직접 이동 저장
                $("#GoDirectlyToSku").on("change", function () {
                    var goToProductBySku = $(this).val();
                    document.cookie = "GoDirectlyToSku=" + goToProductBySku + ";path=/";
                });




                // 2. 페이지가 로드될 때 쿠키에서 해당 값을 가져와 필드에 설정

                // 제품 이름 설정
                var storedSearchProductName = getCookie("SearchProductName");
                if (storedSearchProductName) {
                    $("#SearchProductName").val(storedSearchProductName);
                }

                // 카테고리 ID 설정
                var storedSearchCategoryId = getCookie("SearchCategoryId");
                if (storedSearchCategoryId) {
                    $("#SearchCategoryId").val(storedSearchCategoryId);
                }

                var searchIncludeSubCategories = getCookie("SearchIncludeSubCategories");
                if (searchIncludeSubCategories) {
                    $("#SearchIncludeSubCategories").prop('checked', searchIncludeSubCategories === 'on');
                }

                // 제조업체 ID 설정
                var storedSearchManufacturerId = getCookie("SearchManufacturerId");
                if (storedSearchManufacturerId) {
                    $("#SearchManufacturerId").val(storedSearchManufacturerId);
                }

                // 공급업체 ID 설정
                var storedSearchVendorId = getCookie("SearchVendorId");
                if (storedSearchVendorId) {
                    $("#SearchVendorId").val(storedSearchVendorId);
                }

                // 상점 ID 설정
                var storedSearchStoreId = getCookie("SearchStoreId");
                if (storedSearchStoreId) {
                    $("#SearchStoreId").val(storedSearchStoreId);
                }

                // 창고 ID 설정
                var storedSearchWarehouseId = getCookie("SearchWarehouseId");
                if (storedSearchWarehouseId) {
                    $("#SearchWarehouseId").val(storedSearchWarehouseId);
                }

                // 제품 유형 ID 설정
                var storedSearchProductTypeId = getCookie("SearchProductTypeId");
                if (storedSearchProductTypeId) {
                    $("#SearchProductTypeId").val(storedSearchProductTypeId);
                }

                // 게시 상태 설정
                var storedSearchPublishedId = getCookie("SearchPublishedId");
                if (storedSearchPublishedId) {
                    $("#SearchPublishedId").val(storedSearchPublishedId);
                }

                // SKU로 직접 이동 설정
                var storedGoDirectlyToSku = getCookie("GoDirectlyToSku");
                if (storedGoDirectlyToSku) {
                    $("#GoDirectlyToSku").val(storedGoDirectlyToSku);
                }

                // 3. DataTable 초기화
                var defaultPageLength = parseInt(getCookie('dataTablePageLength')) || 15;
                var storedPageNumber = parseInt(getCookie('dataTablePageNumber'));

                var table = $('#products-grid').DataTable({
                    destroy: true,
                    autoWidth: false,
                    pageLength: defaultPageLength,
                    retrieve: true,
                    drawCallback: function () {
                        // 이전에 추가했던 코드
                        var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
                        tooltipTriggerList.map(function (tooltipTriggerEl) {
                            return new bootstrap.Tooltip(tooltipTriggerEl, { trigger: 'hover', delay: { show: 100, hide: 100 } });
                        });
                    },
                    initComplete: function () {
                        if (!isNaN(storedPageNumber) && storedPageNumber > 0) {
                            // 저장된 페이지 번호가 유효한지 확인
                            if (storedPageNumber <= table.page.info().pages) {
                                table.page(storedPageNumber - 1).draw(false);  // 1-based index를 다시 0-based index로 변환하여 사용
                                alert("페이지 번호 " + storedPageNumber + "로 이동했습니다.");
                            } else {
                                alert("Stored page number in cookie is not valid. Defaulting to page 1.");
                            }
                        }
                    }
                });

                table.page(3).draw(true);
                table.page.len(defaultPageLength).draw(); // 페이지 크기 설정 및 그리기

                // 페이지 크기가 변경될 때 설정 저장하기
                $('#products-grid').on('length.dt', function (e, settings, len) {
                    document.cookie = "dataTablePageLength=" + len + ";path=/";
                    //alert("페이지 크기 " + len + "가 저장되었습니다.");
                });

                // 페이지 번호 변경 감지 및 저장하기
                $('#products-grid').on('page.dt', function () {
                    var currentPage = table.page() + 1; // 0-based index를 1-based index로 변환하여 저장
                    document.cookie = "dataTablePageNumber=" + currentPage + ";path=/";
                    //alert("페이지 번호 " + currentPage + "가 저장되었습니다.");
                });
            });

            // 쿠키 값을 가져오는 함수
            function getCookie(name) {
                var value = "; " + document.cookie;
                var parts = value.split("; " + name + "=");
                if (parts.length == 2) return parts.pop().split(";").shift();
            }
        </script>
    </form>
}

<script>
    $(document).ready(function () {
        var displayModal = @((Model.LicenseCheckModel?.DisplayWarning == true || Model.LicenseCheckModel?.BlockPages == true).ToString().ToLower());
        if (displayModal) {
            $('#license-window').modal({
                backdrop: 'static',
                keyboard: false
            });

            $('#license-window').on('shown.bs.modal', function (event) {
                var modalCloseEl = $(this).find('button.close');
                var closeTextEl = $('span', modalCloseEl);

                var startFrom = 5;
                closeTextEl.text(startFrom);

                const timer = setInterval(function () {
                    if (startFrom-- > 0)
                        closeTextEl.text(startFrom);
                }, 1000);

                setTimeout(function () {
                    closeTextEl.html('&times;');
                    modalCloseEl.on('click', function () {
                        $('#license-window').modal('hide')
                    });
                    clearInterval(timer);
                }, startFrom * 1000);
            });
        }
    });
</script>
<div id="license-window" class="modal fade" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            @Html.Raw(Model.LicenseCheckModel?.WarningText)
        </div>
    </div>
</div>

@*import products form*@
<div id="importexcel-window" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="importexcel-window-title">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title" id="importexcel-window-title">@T("Admin.Common.ImportFromExcel")</h4>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
            </div>
            <form asp-controller="Product" asp-action="ImportExcel" method="post" enctype="multipart/form-data">
                <div class="form-horizontal">
                    <div class="modal-body">
                        <ul class="common-list">
                            <li>
                                <em>@T("Admin.Catalog.Products.List.ImportFromExcelTip")</em>
                            </li>
                            <li>
                                <em>@T("Admin.Common.ImportFromExcel.ManyRecordsWarning")</em>
                            </li>
                        </ul>
                        <div class="form-group row">
                            <div class="col-md-2">
                                <div class="label-wrapper">
                                    <label class="col-form-label">
                                        @T("Admin.Common.ExcelFile")
                                    </label>
                                </div>
                            </div>
                            <div class="col-md-10">
                                <input type="file" id="importexcelfile" name="importexcelfile" class="form-control" />
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="submit" class="btn btn-primary">
                            @T("Admin.Common.ImportFromExcel")
                        </button>
                    </div>
                </div>
            </form>
        </div>
    </div>
</div>

@*export selected (XML). We don't use GET approach because it's limited to 2K-4K chars and won't work for large number of entities*@
<form asp-controller="Product" asp-action="ExportXmlSelected" method="post" id="export-xml-selected-form">
    <input type="hidden" id="selectedIds" name="selectedIds" value="" />
</form>

<script>
    $(document).ready(function () {
        $('#exportxml-selected').click(function (e) {
            e.preventDefault();
            var ids = selectedIds.join(",");
            if (!ids) {
                $('#exportXmlSelected-info').text("@T("Admin.Products.NoProducts")");
                $("#exportXmlSelected").click();
            }
            else {
                $('#export-xml-selected-form #selectedIds').val(ids);
                $('#export-xml-selected-form').submit();
                updateTable('#products-grid');
            }
            return false;
        });
    });
</script>
<nop-alert asp-alert-id="exportXmlSelected" />

@*export selected (Excel). We don't use GET approach because it's limited to 2K-4K chars and won't work for large number of entities*@
<form asp-controller="Product" asp-action="ExportExcelSelected" method="post" id="export-excel-selected-form">
    <input type="hidden" id="selectedIds" name="selectedIds" value="" />
</form>

<script>
    $(document).ready(function () {
        $('#exportexcel-selected').click(function (e) {
            e.preventDefault();
            var ids = selectedIds.join(",");
            if (!ids) {
                $('#exportExcelSelected-info').text("@T("Admin.Products.NoProducts")");
                $("#exportExcelSelected").click();
            }
            else {
                $('#export-excel-selected-form #selectedIds').val(ids);
                $('#export-excel-selected-form').submit();
                updateTable('#products-grid');
            }
            return false;
        });
    });
</script>
<nop-alert asp-alert-id="exportExcelSelected" />